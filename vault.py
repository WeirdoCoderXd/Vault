import sqlite3
import os
import hashlib
import os
import base64
import time
from cryptography.fernet import Fernet
from getpass import getpass
from tabulate import tabulate
from pyfiglet import Figlet

DB_FILE = "vault.db"
KEY_FILE = "vault.key"

MAX_ATTEMPTS = 3
BLOCK_TIME = 30 
def generate_key():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as f:
            f.write(key)

def load_key():
    with open(KEY_FILE, "rb") as f:
        return f.read()

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS vault (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            service TEXT,
            username TEXT,
            password BLOB
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS master_password (
            id INTEGER PRIMARY KEY,
            password_hash TEXT,
            salt BLOB
        )
    """)
    conn.commit()
    conn.close()

def generate_salt():
    return os.urandom(16)  # 16 –±–∞–π—Ç —Å–æ–ª–∏

def set_master_password():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM master_password")
    if cursor.fetchone() is None:
        print("üö® –í–∞–∂–Ω–æ: –ó–∞–ø–æ–º–Ω–∏—Ç–µ –≤–∞—à –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å. –ü–æ—Ç–µ—Ä—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º!")
        password = getpass("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")
        salt = generate_salt()
        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ–ª—å—é
        cursor.execute("INSERT INTO master_password (password_hash, salt) VALUES (?, ?)", (password_hash, base64.b64encode(salt).decode()))
        conn.commit()
        print("‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    conn.close()

def verify_master_password():
    attempts = 0
    while attempts < MAX_ATTEMPTS:
        password = getpass("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT password_hash, salt FROM master_password WHERE id = 1")
        result = cursor.fetchone()
        stored_hash, salt = result
        salt = base64.b64decode(salt)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–ª—å
        conn.close()

        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ–ª—å—é

        if password_hash == stored_hash:
            return True
        else:
            attempts += 1
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - attempts}")

    print("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥.")
    time.sleep(BLOCK_TIME)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    return False

def encrypt_password(password):
    cipher = Fernet(load_key())
    return cipher.encrypt(password.encode())

def decrypt_password(encrypted_password):
    cipher = Fernet(load_key())
    return cipher.decrypt(encrypted_password).decode()

def add_entry():
    service = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ")
    username = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
    password = getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO vault (service, username, password) 
        VALUES (?, ?, ?)
    """, (service, username, encrypt_password(password)))
    conn.commit()
    conn.close()
    print("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

def list_entries():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id, service, username FROM vault")
    entries = cursor.fetchall()
    conn.close()

    if entries:
        print(tabulate(entries, headers=["ID", "–°–µ—Ä–≤–∏—Å", "–õ–æ–≥–∏–Ω"], tablefmt="fancy_grid"))
    else:
        print("üìã –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ.")

def view_password():
    if not verify_master_password():
        return

    entry_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏: ")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT password FROM vault WHERE id = ?", (entry_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        print(f"üîë –ü–∞—Ä–æ–ª—å: {decrypt_password(result[0])}")
    else:
        print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def delete_entry():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID."""
    entry_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM vault WHERE id = ?", (entry_id,))
    conn.commit()
    conn.close()
    print("üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")

def banner():
    f = Figlet(font='slant')
    print(f.renderText('Password Vault'))

def menu():
    while True:
        print("\n1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
        print("4. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("5. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            add_entry()
        elif choice == "2":
            list_entries()
        elif choice == "3":
            view_password()
        elif choice == "4":
            delete_entry()
        elif choice == "5":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    generate_key()
    init_db()
    set_master_password()
    banner()
    menu()

if __name__ == "__main__":
    main()

