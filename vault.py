import sqlite3
import os
import hashlib
import base64
import time
from cryptography.fernet import Fernet
from getpass import getpass
from tabulate import tabulate
from pyfiglet import Figlet
import sys

DB_FILE = "vault.db"
KEY_FILE = "vault.key"
MAX_ATTEMPTS = 3
BLOCK_TIME = 30

def generate_key():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as f:
            f.write(key)

def load_key():
    with open(KEY_FILE, "rb") as f:
        return f.read()

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS vault (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            service TEXT,
            username TEXT,
            password BLOB
        )
    """)

    cursor.execute("PRAGMA table_info(master_password)")
    columns = [col[1] for col in cursor.fetchall()]

    if "salt" not in columns:
        print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã master_password...")
        cursor.execute("DROP TABLE IF EXISTS master_password")
        cursor.execute("""
            CREATE TABLE master_password (
                id INTEGER PRIMARY KEY,
                password_hash TEXT,
                salt BLOB
            )
        """)

    conn.commit()
    conn.close()

def generate_salt():
    return os.urandom(16)

def set_master_password():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM master_password")
    if cursor.fetchone() is None:
        print("üö® –í–∞–∂–Ω–æ: –ó–∞–ø–æ–º–Ω–∏—Ç–µ –≤–∞—à –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –∑–∞–±—É–¥–µ—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
        password = getpass("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")
        salt = generate_salt()
        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        cursor.execute("INSERT INTO master_password (password_hash, salt) VALUES (?, ?)",
                       (password_hash, base64.b64encode(salt).decode()))
        conn.commit()
        print("‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    conn.close()

def verify_master_password():
    attempts = 0
    while attempts < MAX_ATTEMPTS:
        password = getpass("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT password_hash, salt FROM master_password WHERE id = 1")
        result = cursor.fetchone()
        stored_hash, salt = result
        salt = base64.b64decode(salt)
        conn.close()
        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        if password_hash == stored_hash:
            return True
        else:
            attempts += 1
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - attempts}")
    print("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥.")
    time.sleep(BLOCK_TIME)
    return False

def encrypt_password(password):
    cipher = Fernet(load_key())
    return cipher.encrypt(password.encode())

def decrypt_password(encrypted_password):
    cipher = Fernet(load_key())
    return cipher.decrypt(encrypted_password).decode()

def add_entry():
    try:
        service = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ")
        username = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
        password = getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO vault (service, username, password) 
            VALUES (?, ?, ?)
        """, (service, username, encrypt_password(password)))
        conn.commit()
        conn.close()
        print("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def list_entries():
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, service, username FROM vault")
        entries = cursor.fetchall()
        conn.close()
        if entries:
            print(tabulate(entries, headers=["ID", "–°–µ—Ä–≤–∏—Å", "–õ–æ–≥–∏–Ω"], tablefmt="fancy_grid"))
        else:
            print("üìã –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def view_password():
    if not verify_master_password():
        print("üö® –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        entry_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏: ")
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT password FROM vault WHERE id = ?", (entry_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            print(f"üîë –ü–∞—Ä–æ–ª—å: {decrypt_password(result[0])}")
        else:
            print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def delete_entry():
    try:
        entry_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM vault WHERE id = ?", (entry_id,))
        conn.commit()
        conn.close()
        print("üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def banner():
    f = Figlet(font='slant')
    print(f.renderText('Password Vault'))

def menu():
    while True:
        try:
            print("\n1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
            print("4. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
            print("5. –í—ã–π—Ç–∏")
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
            if choice == "1":
                add_entry()
            elif choice == "2":
                list_entries()
            elif choice == "3":
                view_password()
            elif choice == "4":
                delete_entry()
            elif choice == "5":
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        except KeyboardInterrupt:
            print("\nüö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    generate_key()
    init_db()
    set_master_password()
    banner()
    menu()

if __name__ == "__main__":
    main()

